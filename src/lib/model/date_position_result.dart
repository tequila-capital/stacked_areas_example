// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

import 'package:collection/collection.dart';

import 'data_position_result.dart';

class DatePosition<T> {
  DateTime? date;

  List<T> positions = <T>[];

  DatePosition({this.date, List<T>? positions}) : positions = positions ?? <T>[];
}

class DatePositionResult extends DatePosition<DataPositionResult> {
  // DateTime? date;

  // List<DataPositionResult> positions = const [];

  DatePositionResult({super.date, super.positions});

  @override
  String toString() {
    return 'DatePositionResult[date=$date, positions=$positions, ]';
  }

  static DateTime? fromJsonDate(Map<String, dynamic> json) {
    return (json[r'date'] == null) ? null : DateTime.parse(json[r'date']!);
  }

  static List<DataPositionResult> fromJsonPositions(Map<String, dynamic> json) {
    final jsonData = json[r'positions'];
    if (jsonData == null) {
      return const [];
    }
    return (jsonData == null)
        ? []
        : ((dynamic data) {
            return DataPositionResult.listFromJson(data);
          }(jsonData));
  }

  DatePositionResult.fromJson(Map<String, dynamic> json) {
    date = fromJsonDate(json);
    positions = fromJsonPositions(json);
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (date != null) {
      json[r'date'] = date?.toUtc().toIso8601String();
    }
    if (positions.isNotEmpty) {
      json[r'positions'] = ((v) => v.map((v) => v.toJson()).toList())(positions);
    }
    return json;
  }

  static List<DatePositionResult> listFromJson(List<dynamic>? json) {
    return json == null ? <DatePositionResult>[] : json.map((value) => DatePositionResult.fromJson(value)).toList();
  }

  static Map<String, DatePositionResult> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, DatePositionResult>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = DatePositionResult.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }

    if (other is DatePositionResult && runtimeType == other.runtimeType) {
      return date == other.date && // __other

          const ListEquality().equals(positions, other.positions);
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (date != null) {
      hashCode = hashCode * 31 + date.hashCode;
    }

    if (positions.isNotEmpty) {
      hashCode = hashCode * 31 + const ListEquality().hash(positions);
    }

    return hashCode;
  }

  DatePositionResult copyWith({
    DateTime? date,
    List<DataPositionResult>? positions,
  }) {
    final copyDate = date ?? this.date;

    final copyPositions = positions ??
        ((List<DataPositionResult> data) {
          return data.map((data) => data.copyWith()).toList();
        }(this.positions));

    return DatePositionResult(
      date: copyDate,
      positions: copyPositions,
    );
  }
}
