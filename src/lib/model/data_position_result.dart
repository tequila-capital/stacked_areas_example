// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

class DataPositionResult {
  String? ticker;

  int? shares;

  double? price;

  double? avgPrice;

  bool? isOverride;

  DataPositionResult({this.ticker, this.shares, this.price, this.avgPrice, this.isOverride});

  @override
  String toString() {
    return 'DataPositionResult[ticker=$ticker, shares=$shares, price=$price, avgPrice=$avgPrice, isOverride=$isOverride, ]';
  }

  static String? fromJsonTicker(Map<String, dynamic> json) {
    return (json[r'ticker'] == null) ? null : json[r'ticker'] as String?;
  }

  static int? fromJsonShares(Map<String, dynamic> json) {
    return (json[r'shares'] == null) ? null : json[r'shares'].toInt();
  }

  static double? fromJsonPrice(Map<String, dynamic> json) {
    return (json[r'price'] == null) ? null : json[r'price'].toDouble();
  }

  static double? fromJsonAvgPrice(Map<String, dynamic> json) {
    return (json[r'avgPrice'] == null) ? null : json[r'avgPrice'].toDouble();
  }

  static bool? fromJsonIsOverride(Map<String, dynamic> json) {
    return (json[r'isOverride'] == null) ? null : json[r'isOverride'] as bool?;
  }

  DataPositionResult.fromJson(Map<String, dynamic> json)
      : ticker = fromJsonTicker(json),
        shares = fromJsonShares(json),
        price = fromJsonPrice(json),
        avgPrice = fromJsonAvgPrice(json),
        isOverride = fromJsonIsOverride(json);

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (ticker != null) {
      json[r'ticker'] = ticker;
    }
    if (shares != null) {
      json[r'shares'] = shares;
    }
    if (price != null) {
      json[r'price'] = price;
    }
    if (avgPrice != null) {
      json[r'avgPrice'] = avgPrice;
    }
    if (isOverride != null) {
      json[r'isOverride'] = isOverride;
    }
    return json;
  }

  static List<DataPositionResult> listFromJson(List<dynamic>? json) {
    return json == null ? <DataPositionResult>[] : json.map((value) => DataPositionResult.fromJson(value)).toList();
  }

  static Map<String, DataPositionResult> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, DataPositionResult>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = DataPositionResult.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }

    if (other is DataPositionResult && runtimeType == other.runtimeType) {
      return ticker == other.ticker &&
          shares == other.shares &&
          price == other.price &&
          avgPrice == other.avgPrice &&
          isOverride == other.isOverride;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (ticker != null) {
      hashCode = hashCode * 31 + ticker.hashCode;
    }

    if (shares != null) {
      hashCode = hashCode * 31 + shares.hashCode;
    }

    if (price != null) {
      hashCode = hashCode * 31 + price.hashCode;
    }

    if (avgPrice != null) {
      hashCode = hashCode * 31 + avgPrice.hashCode;
    }

    if (isOverride != null) {
      hashCode = hashCode * 31 + isOverride.hashCode;
    }

    return hashCode;
  }

  DataPositionResult copyWith({
    String? ticker,
    int? shares,
    double? price,
    double? avgPrice,
    bool? isOverride,
  }) {
    final copyTicker = ticker ?? this.ticker;

    final copyShares = shares ?? this.shares;

    final copyPrice = price ?? this.price;

    final copyAvgPrice = avgPrice ?? this.avgPrice;

    final copyIsOverride = isOverride ?? this.isOverride;

    return DataPositionResult(
      ticker: copyTicker,
      shares: copyShares,
      price: copyPrice,
      avgPrice: copyAvgPrice,
      isOverride: copyIsOverride,
    );
  }
}
